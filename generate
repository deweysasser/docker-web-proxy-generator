#!/usr/bin/env python

import argparse
import docker
import time
import sys
import itertools
import traceback
import os
from jinja2 import Template, Environment, FileSystemLoader, select_autoescape

jinjaenv = Environment(
    loader=FileSystemLoader("templates"),
    autoescape=select_autoescape(['conf'])
)

def hostlabel(c):
    if 'proxy.host' in c.labels:
        return c.labels['proxy.host']
    return None

def regenerate(args, client):
    print "Regenerating"

    def key(c):
        if 'proxy.host' in c.labels:
            h = c.labels['proxy.host']
        else:
            h = None
        fport = tport = 80
        for l in c.labels:
            if l.startswith("proxy.port."):
                fport = l[11:]
                tport = c.labels[l]

        return h, fport

    # Remove all existing files
    map(os.remove, ["{}/{}".format(args.dir, x) for x in os.listdir(args.dir) if x.endswith(".conf")])

    # now generate more conf files
    for label, containers in itertools.groupby(sorted(client.containers.list(), key=key), key):
        generate(args, label, map(lambda x: client.api.inspect_container(x.id), containers))


def generate(args, label, containers):
    if label[0] is None:
        return

    hostname, fromport = label

    t = jinjaenv.get_template("{}.conf".format(args.template))

    c = list(containers)

    content = t.render(hostname=hostname, fromport = fromport, containers=c, c1=c[0])

    if content != "":
        filename = "{}/{}_{}.conf".format(args.dir, label[0], label[1])
        print "Printing to %s" % filename
        with open(filename, "w") as f:
            f.write(content)


def main():
    parser = argparse.ArgumentParser(description="Generate conf files from docker")

    parser.add_argument("-template", help="template to call to generate conf files", default="default.conf")
    parser.add_argument("-dir", help="Directory into which to put files", default="/etc/nginx/conf.d")
    parser.add_argument("-append-instance-id", help="append instance ID to directory", action='store_true')

    args = parser.parse_args()

    while True:
        try:
            client = docker.from_env()
            regenerate(args, client)

            for e in client.api.events(decode=True):
                if e['Action'] in ['start', 'die']:
                    regenerate(args, client)
        except KeyboardInterrupt:
            sys.exit(1)
        except:
            traceback.print_exc()
            time.sleep(5)

if __name__ == "__main__":
    main()


