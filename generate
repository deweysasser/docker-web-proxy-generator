#!/usr/bin/env python

import argparse
import docker
import time
import sys
import itertools
import traceback
import signal
import os
import urllib2

from jinja2 import Template, Environment, FileSystemLoader, select_autoescape, TemplateNotFound

jinjaenv = Environment(
    loader=FileSystemLoader(["/templates", "templates"]),
    autoescape=select_autoescape(['conf'])
)


def exception_ignored(func):
    def wrapper(*args, **kwargs):
        try:
            func(*args, **kwargs)
        except Exception as e:
            traceback.print_exc()
            print "Function {} threw exception.  Execution continuing".format(func.__name__)

    return wrapper
            

def hostlabel(c):
    if 'proxy.host' in c.labels:
        return c.labels['proxy.host']
    return None

def regenerate(args, client):
    print "Regenerating"

    def key(c):
        if 'proxy.host' in c.labels:
            h = c.labels['proxy.host']
        else:
            h = None

        return h

    

    # Remove all existing files
    map(os.remove, ["{}/{}".format(args.conf_dir, x) for x in os.listdir(args.conf_dir) if x.endswith(".conf")])

    container_list= client.containers.list()

    # now generate more conf files
    groups = itertools.groupby(sorted(container_list, key=key), key)
    for label, containers in groups:
        generate_vhost(args, label, map(lambda x: client.api.inspect_container(x.id), containers))

        
    print "Container list is {}".format(container_list)
    hosts = sorted(set(filter(None,map(key, client.containers.list()))))

    generate(args, args.conf_dir, args.default_template, hosts)
    generate(args, "/usr/share/nginx/html", args.index_template, hosts)

    notify(args, client.containers.list())

@exception_ignored
def notify(args, containers):
    def notify(c):
        print "Notifying {} with SIGHUP".format(c.name)
        c.kill(signal=signal.SIGHUP)

    map(notify, [c for c in containers if "proxy.notify" in c.labels])

@exception_ignored
def generate(args, dir, name, hosts):

    try:
        t = jinjaenv.get_template(name)

        print "Rendering {} with {}".format(name, hosts)

        content = t.render(hosts=hosts)

        if content != "":
            filename = "{}/{}".format(dir, name)
            print "Printing to %s" % filename
            with open(filename, "w") as f:
                f.write(content)
    except TemplateNotFound:
        print "No template found for {}.  Skipping".format(name)


@exception_ignored
def generate_vhost(args, label, containers):
    if label is None:
        return

    hostname = label
    fromport = 80

    try:
        t = jinjaenv.get_template("{}.conf".format(hostname))
    except TemplateNotFound:
        t = jinjaenv.get_template(args.vhost_template)

    c = list(containers)

    print "Containers for {}: {}".format(label, ", ".join([x['Name'] for x in containers]))

    content = t.render(hostname=hostname, fromport = fromport, containers=c, c1=c[0])

    if content != "":
        filename = "{}/{}_{}.conf".format(args.conf_dir, hostname, fromport)
        print "Printing to %s" % filename
        with open(filename, "w") as f:
            f.write(content)


def main():
    parser = argparse.ArgumentParser(description="Generate conf files from docker")

    parser.add_argument("-append-instance-id", help="append instance ID to directory", action='store_true')
    parser.add_argument("-conf-dir", help="directory into which to generate files", default="/etc/nginx/conf.d")
    parser.add_argument("-verbose", help="Verbose output", action='store_true')
    parser.add_argument("-vhost-template", help="Default VHOST template to use", default="vhost.conf")
    parser.add_argument("-default-template", help="Default server template to use", default="default.conf")
    parser.add_argument("-index-template", help="Default server template to use", default="index.html")
    args = parser.parse_args()

    if args.append_instance_id:
        response = urllib2.urlopen('http://169.254.169.254/latest/meta-data/instance-id')
        id = response.read()
        args.conf_dir = "{}/{}".format(args.conf_dir, id)

    while True:
        try:
            client = docker.from_env()
            regenerate(args, client)

            for e in client.api.events(decode=True):
                if e['Action'] in ['start', 'die']:
                    regenerate(args, client)
        except KeyboardInterrupt:
            sys.exit(1)
        except:
            traceback.print_exc()
            time.sleep(5)

if __name__ == "__main__":
    main()


